---
title: "USAID Supply Chain Performance Dashboard"
format: 
  dashboard:
    orientation: columns
    theme: [default, custom.scss]
    nav-buttons:
      - icon: github
        href: https://github.com/satoshi-F13
      - icon: mastodon
        href: https://mastodon.social/@satoshi_F13
---
```{r, loadpackages}
#| label: setup
#| include: false

# Load required libraries
library(tidyverse)
library(scales)
library(ggrepel)
library(viridis)
library(countrycode)
library(gt)
library(gtExtras)
library(leaflet)
library(sf)
library(rnaturalearth)
library(ggridges)
library(patchwork)
library(htmltools)
library(bslib)
library(bsicons)
library(networkD3)
library(dplyr)
library(tidyr)
library(htmlwidgets)
library(viridis)
# Load and clean data
crm_data <- read_csv("data/crm_data_cleaned.csv")

crm_clean <- crm_data %>%
  mutate(
    delivered_to_client_date = as.Date(delivered_to_client_date),
    scheduled_delivery_date = as.Date(scheduled_delivery_date),
    country_map = countrycode(country_clean, 
                              origin = "country.name", 
                              destination = "country.name",
                              nomatch = country_clean),
    on_time = ifelse(delivery_delay_days <= 0, 1, 0),
    cost_per_unit = total_cost / (line_item_quantity * unit_of_measure_per_pack)
  )

# Calculate key metrics for value boxes
kpi_metrics <- crm_clean %>%
  summarise(
    total_shipments = n(),
    total_value = sum(line_item_value, na.rm = TRUE),
    avg_on_time = mean(on_time, na.rm = TRUE) * 100,
    avg_delay = mean(delivery_delay_days, na.rm = TRUE),
    unique_vendors = n_distinct(vendor_short),
    unique_countries = n_distinct(country_clean)
  )

# Vendor scorecard calculation
vendor_scorecard <- crm_clean %>%
  group_by(vendor_short) %>%
  summarise(
    total_shipments = n(),
    total_value = sum(line_item_value, na.rm = TRUE),
    avg_delay_days = mean(delivery_delay_days, na.rm = TRUE),
    on_time_pct = mean(on_time, na.rm = TRUE) * 100,
    avg_unit_price = mean(unit_price, na.rm = TRUE),
    countries_served = n_distinct(country_clean),
    .groups = 'drop'
  ) %>%
  filter(!vendor_short == "SCMS from RDC" & total_shipments >= 5) %>%
  mutate(
    delivery_score = scales::rescale(100 - avg_delay_days, to = c(0, 100)),
    delivery_score = pmax(0, delivery_score),
    volume_score = scales::rescale(total_value, to = c(0, 100)),
    price_score = scales::rescale(-avg_unit_price, to = c(0, 100)),
    overall_score = (delivery_score * 0.4 + volume_score * 0.3 + price_score * 0.3)
  ) %>%
  arrange(desc(overall_score))

# Country metrics for map
country_metrics <- crm_clean %>%
  group_by(country_map) %>%
  summarise(
    total_shipments = n(),
    total_value = sum(line_item_value, na.rm = TRUE),
    on_time_pct = mean(on_time, na.rm = TRUE) * 100,
    .groups = 'drop'
  )

# Product metrics
product_metrics <- crm_clean %>%
  group_by(molecule_test_type, brand) %>%
  summarise(
    shipments = n(),
    total_volume = sum(line_item_quantity, na.rm = TRUE),
    total_value = sum(line_item_value, na.rm = TRUE),
    avg_unit_price = mean(unit_price, na.rm = TRUE),
    median_unit_price = median(unit_price, na.rm = TRUE),
    vendors = n_distinct(vendor_short),
    .groups = "drop"
  ) %>%
  mutate(
    value_per_shipment = total_value / shipments,
    brand_type = ifelse(brand == "Generic", "Generic", "Branded")
  )

# Price comparison data
common_molecules <- crm_clean %>%
  filter(brand %in% c("Generic", "Stocrin/Sustiva", "Viramune", 
                      "Combivir", "Truvada", "Atripla")) %>%
  group_by(molecule_test_type) %>%
  filter(n_distinct(brand) > 1, n() > 10) %>%
  ungroup() %>%
  mutate(
    brand_simple = ifelse(brand == "Generic", "Generic", "Branded"),
    molecule_label = str_wrap(molecule_test_type, width = 11)
  )

price_summary <- common_molecules %>%
  group_by(molecule_label, brand_simple) %>%
  summarise(
    median_price = median(unit_price, na.rm = TRUE),
    n_orders = n(),
    .groups = 'drop'
  ) %>%
  group_by(molecule_label) %>%
  mutate(
    savings_pct = (max(median_price) - min(median_price)) / max(median_price) * 100
  )
```


# Overview {orientation="rows"}
## Row {height="20%"}


```{r}
#| content: valuebox
#| title: "Total Shipments"
#| icon: box-seam
#| color: primary

list(
  value = format(kpi_metrics$total_shipments, big.mark = ","),
  caption = "Shipments tracked"
)
```


```{r}
#| content: valuebox
#| title: "Total Value"
#| icon: currency-dollar
#| color: success

list(
  value = paste0("$", format(round(kpi_metrics$total_value / 1e6, 1), big.mark = ","), "M"),
  caption = "Total shipment value"
)
```



```{r}
#| content: valuebox
#| title: "On-Time Delivery"
#| icon: clock-history
#| color: info

list(
  value = paste0(round(kpi_metrics$avg_on_time, 1), "%"),
  caption = paste0("Avg delay: ", round(kpi_metrics$avg_delay, 1), " days")
)
```

```{r}
#| content: valuebox
#| title: "Active Vendors"
#| icon: building
#| color: warning

list(
  value = kpi_metrics$unique_vendors,
  caption = paste0(kpi_metrics$unique_countries, " countries served")
)
```



## Row {height="80%"}
### Column {width="50%"}

```{r}
#| title: "Global Shipment Distribution"
#| padding: 0

# Prepare map data
world_sf <- ne_countries(scale = "medium", returnclass = "sf") %>%
  select(name, geometry, iso_a3, continent) %>%
  mutate(
    name_clean = countrycode(name, 
                            origin = "country.name",
                            destination = "country.name",
                            nomatch = name)
  )

map_data_sf <- world_sf %>%
  left_join(country_metrics, by = c("name_clean" = "country_map")) %>%
  mutate(
    total_value_clean = ifelse(is.na(total_value) | total_value <= 0, NA, total_value),
    total_value_log = ifelse(is.na(total_value_clean), NA, log10(total_value_clean))
  )

valid_values <- map_data_sf$total_value_log[!is.na(map_data_sf$total_value_log)]
custom_colors <- c("#E0EBD6", "#AED597", "#8CC561", "#56AA59", "#3D6B35")

pal <- colorNumeric(
  palette = custom_colors,
  domain = valid_values,
  na.color = "#d3d3d3"
)

labels <- sprintf(
  "<strong>%s</strong><br/>
  Total Value: %s<br/>
  Shipments: %s<br/>
  On-Time: %s",
  map_data_sf$name_clean,
  ifelse(is.na(map_data_sf$total_value), 
         "No data", 
         paste0("$", format(round(map_data_sf$total_value, 0), big.mark = ","))),
  ifelse(is.na(map_data_sf$total_shipments), 
         "No data", 
         format(map_data_sf$total_shipments, big.mark = ",")),
  ifelse(is.na(map_data_sf$on_time_pct), 
         "No data", 
         paste0(round(map_data_sf$on_time_pct, 1), "%"))
) %>% lapply(htmltools::HTML)

leaflet(map_data_sf) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(total_value_log),
    fillOpacity = 0.7,
    color = "white",
    weight = 1,
    opacity = 1,
    highlight = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.9,
      bringToFront = TRUE
    ),
    label = labels,
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "13px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    colors = custom_colors,
    labels = c("< $100K", "$100K - $1M", "$1M - $10M", "$10M - $100M", "> $100M"),
    opacity = 0.7,
    title = "Total Value ($)",
    position = "bottomright"
  ) %>%
  setView(lng = 0, lat = 20, zoom = 2)
```


### Column {width="50%"}


```{r}
#| title: "Top 15 Vendor Performance Ranking"

vendor_dots <- vendor_scorecard %>%
  slice_max(overall_score, n = 15) %>%
  mutate(
    rank = row_number(),
    vendor_tier = case_when(
      overall_score >= 75 ~ "Star Vendors",
      overall_score >= 50 ~ "Solid Performers",
      TRUE ~ "Average Vendors"
    )
  )

vendor_dots %>%
  ggplot(aes(x = overall_score, y = reorder(vendor_short, overall_score))) +
  geom_segment(aes(x = 0, xend = overall_score, 
                   y = vendor_short, yend = vendor_short,
                   color = vendor_tier),
               linewidth = 2, alpha = 0.6) +
  geom_point(aes(color = vendor_tier), size = 6, alpha = 0.9) +
  geom_text(aes(label = rank), color = "white", size = 3, fontface = "bold") +
  geom_text(aes(label = round(overall_score, 0)), 
            hjust = -0.5, size = 3.5, fontface = "bold") +
  geom_vline(xintercept = c(50, 75), linetype = "dashed", 
             color = "grey60", alpha = 0.5) +
  scale_color_manual(
    values = c("Star Vendors" = "#2ecc71",
               "Solid Performers" = "#3498db",
               "Average Vendors" = "#f39c12")
  ) +
  scale_x_continuous(limits = c(0, 105), breaks = seq(0, 100, 25)) +
  labs(
    title = NULL,
    x = "Overall Performance Score",
    y = NULL,
    color = "Vendor Tier"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "top"
  )
```



# Vendor Analysis {orientation="columns"}
## Column {width="50%"}
### Row {height="100%"}
```{r}
#| title: "Detailed Vendor Scorecard"

vendor_scorecard %>%
  slice_max(overall_score, n = 20) %>%
  select(vendor_short, total_shipments, total_value, 
         on_time_pct, avg_delay_days, avg_unit_price, overall_score) %>%
  gt() %>%
  fmt_number(columns = total_shipments, decimals = 0) %>%
  fmt_currency(columns = c(total_value, avg_unit_price), currency = "USD") %>%
  fmt_number(columns = c(on_time_pct, overall_score), decimals = 1) %>%
  fmt_number(columns = avg_delay_days, decimals = 1) %>%
  data_color(
    columns = overall_score,
    colors = scales::col_numeric(
      palette = c("#e74c3c", "#f39c12", "#2ecc71"),
      domain = c(0, 100)
    )
  ) %>%
  data_color(
    columns = on_time_pct,
    colors = scales::col_numeric(
      palette = c("#e74c3c", "#f39c12", "#2ecc71"),
      domain = c(0, 100)
    )
  ) %>%
  cols_label(
    vendor_short = "Vendor",
    total_shipments = "Shipments",
    total_value = "Total Value",
    on_time_pct = "On-Time %",
    avg_delay_days = "Avg Delay",
    avg_unit_price = "Avg Price",
    overall_score = "Score"
  ) %>%
  tab_options(
    table.font.size = px(11),
    data_row.padding = px(4)
  )
```





## Column {width="50%"}

```{r}
#| title: "Product Distributing Flow by Vendor"

library(networkD3)
library(dplyr)
library(tidyr)
library(htmlwidgets)
library(scales)

# Enhanced version with data filtering and better color mapping

# Filter top 15 countries first
top_countries <- crm_clean %>%
  group_by(country_clean) %>%
  summarise(total = sum(total_cost, na.rm = TRUE)) %>%
  arrange(desc(total)) %>%
  slice_head(n = 15) %>%
  pull(country_clean)

# Filter top vendors (excluding SCMS from RDC)
top_vendors <- crm_clean %>%
  filter(!vendor == "SCMS from RDC") %>% 
  group_by(vendor_short) %>%
  summarise(total = sum(total_cost, na.rm = TRUE)) %>%
  arrange(desc(total)) %>%
  slice_head(n = 15) %>%
  pull(vendor_short)

# Filter dataset for both top vendors AND top countries
crm_filtered <- crm_clean %>%
  filter(vendor_short %in% top_vendors & country_clean %in% top_countries)

# Create flows with filtered data - ADD FLOW LEVEL IDENTIFIER
flow1_filtered <- crm_filtered %>%
  group_by(vendor_short, product_group) %>%
  summarise(value = sum(total_cost, na.rm = TRUE)) %>%
  ungroup() %>%
  rename(source = vendor_short, target = product_group) %>%
  filter(value > 1000) %>%
  mutate(flow_level = 1)  # Add flow level

flow2_filtered <- crm_filtered %>%
  group_by(product_group, sub_classification) %>%
  summarise(value = sum(total_cost, na.rm = TRUE)) %>%
  ungroup() %>%
  rename(source = product_group, target = sub_classification) %>%
  filter(value > 1000) %>%
  mutate(flow_level = 2)  # Add flow level

flow3_filtered <- crm_filtered %>%
  group_by(sub_classification, country_clean) %>%
  summarise(value = sum(total_cost, na.rm = TRUE)) %>%
  ungroup() %>%
  rename(source = sub_classification, target = country_clean) %>%
  filter(value > 1000) %>%
  mutate(flow_level = 3)  # Add flow level

# Add level suffixes
flow1_filtered$target <- paste0(flow1_filtered$target, "_2")
flow2_filtered$source <- paste0(flow2_filtered$source, "_2")
flow2_filtered$target <- paste0(flow2_filtered$target, "_3")
flow3_filtered$source <- paste0(flow3_filtered$source, "_3")

# Combine flows
links_filtered <- rbind(flow1_filtered, flow2_filtered, flow3_filtered)

# Create nodes with specific colors for each product group and level
nodes_filtered <- data.frame(
  name = unique(c(as.character(links_filtered$source), 
                  as.character(links_filtered$target))),
  stringsAsFactors = FALSE
)

nodes_filtered$label <- gsub("_[0-9]$", "", nodes_filtered$name)

# Add node group based on level (for NodeGroup parameter)
nodes_filtered$group <- case_when(
  !grepl("_", nodes_filtered$name) & nodes_filtered$name %in% unique(flow1_filtered$source) ~ "vendor",
  grepl("_2$", nodes_filtered$name) ~ "product_group",
  grepl("_3$", nodes_filtered$name) ~ "sub_classification",
  !grepl("_", nodes_filtered$name) ~ "country",
  TRUE ~ "other"
)

# Assign color-blind friendly colors with different schemes for each level
nodes_filtered$color <- case_when(
  # First level (vendors) - neutral colors
  !grepl("_", nodes_filtered$name) & grepl("Aurobindo", nodes_filtered$label) ~ "#8DD3C7",
  !grepl("_", nodes_filtered$name) & grepl("NOVARTIS", nodes_filtered$label) ~ "#FFFFB3",
  !grepl("_", nodes_filtered$name) & grepl("HETERO", nodes_filtered$label) ~ "#BEBADA",
  nodes_filtered$group == "vendor" ~ "#D9D9D9",  # Other vendors
  
  # Second level (product groups) - strong colors
  grepl("ARV", nodes_filtered$label) ~ "#E41A1C",     # Red
  grepl("HRDT", nodes_filtered$label) ~ "#984EA3",    # Purple
  grepl("ACT", nodes_filtered$label) ~ "#377EB8",     # Blue
  grepl("ANTM", nodes_filtered$label) ~ "#FF7F00",    # Orange
  grepl("MRDT", nodes_filtered$label) ~ "#4DAF4A",    # Green
  
  # Third level (sub-classifications) - pastel colors
  grepl("Adult", nodes_filtered$label) ~ "#FDB462",
  grepl("Pediatric", nodes_filtered$label) ~ "#80B1D3",
  grepl("HIV test", nodes_filtered$label) ~ "#FB8072",
  grepl("Malaria", nodes_filtered$label) ~ "#B3DE69",
  
  # Fourth level (countries) - earth tones
  TRUE ~ "#A6761D"
)

# Create IDs
links_filtered$IDsource <- match(links_filtered$source, nodes_filtered$name) - 1
links_filtered$IDtarget <- match(links_filtered$target, nodes_filtered$name) - 1

# Format values for display
links_filtered$value_formatted <- dollar(links_filtered$value, accuracy = 1)

# Create final Sankey with custom node colors - REMOVED NodeGroup parameter
final_sankey <- sankeyNetwork(
  Links = links_filtered,
  Nodes = nodes_filtered,
  Source = "IDsource",
  Target = "IDtarget",
  Value = "value",
  NodeID = "label",
  # NodeGroup = "group",  # Optional - only add if you want node grouping
  units = "USD",
  fontSize = 11,
  fontFamily = "Helvetica Neue, Arial, sans-serif",
  nodeWidth = 25,
  nodePadding = 6,
  margin = list(top = 10, right = 120, bottom = 10, left = 10),
  height = 650,
  width = 1200,
  iterations = 100,
  sinksRight = TRUE
)

# Apply enhanced styling with different colors for each flow level
final_sankey_styled <- htmlwidgets::onRender(
  final_sankey,
  '
  function(el, x) {
    // Format numbers with commas and dollar sign
    var formatNumber = d3.format("$,.0f");
    
    // Get the links
    var links = d3.selectAll(".link");
    
    // Custom link colors based on flow level
    links.style("stroke", function(d, i) {
      // Determine flow level based on source/target node names
      var sourceName = d.source.name;
      var targetName = d.target.name;
      
      if (!sourceName.includes("_")) {
        // First flow: vendor to product_group
        // Use vendor colors (lighter/neutral)
        return "#C0C0C0";  // Silver for vendor flows
      } else if (sourceName.includes("_2") && targetName.includes("_3")) {
        // Second flow: product_group to sub_classification
        // Use product group colors
        if (sourceName.includes("ARV")) return "#FFB3B3";   // Light red
        if (sourceName.includes("HRDT")) return "#D4B3E6";  // Light purple
        if (sourceName.includes("ACT")) return "#A3C8E8";   // Light blue
        if (sourceName.includes("ANTM")) return "#FFD4A3";  // Light orange
        if (sourceName.includes("MRDT")) return "#B3E6B3";  // Light green
        return "#D9D9D9";
      } else if (sourceName.includes("_3") && !targetName.includes("_")) {
        // Third flow: sub_classification to country
        // Use sub-classification colors
        if (sourceName.includes("Adult")) return "#FFDAB9";      // Peach
        if (sourceName.includes("Pediatric")) return "#B0E0E6";  // Powder blue
        if (sourceName.includes("HIV")) return "#FFB6C1";        // Light pink
        if (sourceName.includes("Malaria")) return "#D8F5A2";    // Light yellow-green
        return "#E6E6E6";  // Light gray default
      } else {
        // Default
        return "#D9D9D9";
      }
    })
    .style("stroke-opacity", 0.4);
    
    // Enhanced hover effects
    links.on("mouseover", function(d) {
      d3.select(this)
        .style("stroke-opacity", 0.9);
      
      var linkValue = formatNumber(d.value);
      d3.select(this).select("title")
        .text(d.source.name.replace(/_[0-9]$/, "") + " → " + 
              d.target.name.replace(/_[0-9]$/, "") + "\\n" + 
              linkValue);
    })
    .on("mouseout", function(d) {
      d3.select(this)
        .style("stroke-opacity", 0.4);
    });
    
    // Style the nodes
    d3.selectAll(".node rect")
      .style("fill-opacity", 0.95)
      .style("shape-rendering", "crispEdges")
      .style("stroke-width", "1px")
      .style("stroke", function(d) {
        return d3.rgb(d.color).darker(0.3);
      });
    
    // Enhance text labels
    d3.selectAll(".node text")
      .style("font-size", function(d) {
        if (!d.name.includes("_")) return "10px";  // Countries
        return "11px";
      })
      .style("font-weight", "400")
      .style("fill", "#2c3e50");
    
    // Add value labels on hover for nodes
    d3.selectAll(".node").on("mouseover", function(d) {
      var nodeValue = formatNumber(d.value);
      d3.select(this).select("title")
        .text(d.name.replace(/_[0-9]$/, "") + "\\n" + nodeValue);
    });
    
    // Add subtle gradient background
    d3.select(el).select("svg")
      .style("background", "linear-gradient(135deg, #fdfbfb 0%, #ebedee 100%)");
    
    // Create a custom tooltip div
    var tooltip = d3.select("body").append("div")
      .attr("class", "sankey-tooltip")
      .style("opacity", 0)
      .style("position", "absolute")
      .style("padding", "10px")
      .style("background", "rgba(0, 0, 0, 0.85)")
      .style("color", "#fff")
      .style("border-radius", "5px")
      .style("font-family", "Helvetica Neue, Arial, sans-serif")
      .style("font-size", "12px")
      .style("pointer-events", "none");
    
    // Enhanced link hover with custom tooltip
    links.on("mousemove", function(d) {
      var linkValue = formatNumber(d.value);
      tooltip.transition()
        .duration(200)
        .style("opacity", .95);
      tooltip.html(
        "<strong>" + d.source.name.replace(/_[0-9]$/, "") + "</strong>" +
        " → " +
        "<strong>" + d.target.name.replace(/_[0-9]$/, "") + "</strong>" +
        "<br/>" +
        "<span style=\'color: #4CAF50; font-size: 14px; font-weight: bold;\'>" + 
        linkValue + "</span>"
      )
      .style("left", (d3.event.pageX + 10) + "px")
      .style("top", (d3.event.pageY - 28) + "px");
    })
    .on("mouseout", function(d) {
      tooltip.transition()
        .duration(500)
        .style("opacity", 0);
    });
  }
  '
)

# Display
final_sankey_styled
```



# Product Analysis {orientation="rows"}
## Row {height="20%"}
```{r}
#| label: prep-product-valueboxes
#| include: false

# Prepare treemap data
treemap_data <- crm_clean %>%
  group_by(product_group, sub_classification) %>%
  summarise(
    total_value = sum(line_item_value, na.rm = TRUE),
    shipments = n(),
    .groups = 'drop'
  )

# Calculate totals by product_group for value boxes
product_totals <- treemap_data %>%
  group_by(product_group) %>%
  summarise(
    total_value = sum(total_value),
    shipments = sum(shipments),
    .groups = 'drop'
  ) %>%
  arrange(desc(total_value))

# Get top 5 product groups for value boxes
top_products <- product_totals %>% head(5)
```


```{r}
#| content: valuebox
#| title: !expr top_products$product_group[1]
#| color: success

list(
  value = paste0("$", format(round(top_products$total_value[1] / 1e6, 1), big.mark = ","), "M"),
  caption = paste(format(top_products$shipments[1], big.mark = ","), "shipments")
)
```


```{r}
#| content: valuebox
#| title: !expr top_products$product_group[2]
#| color: success

list(
  value = paste0("$", format(round(top_products$total_value[2] / 1e6, 1), big.mark = ","), "M"),
  caption = paste0(format(top_products$shipments[2], big.mark = ","), "shipments")
)
```



```{r}
#| content: valuebox
#| title: !expr top_products$product_group[3]
#| color: info

list(
  value = paste0("$", format(round(top_products$total_value[3] / 1e6, 1), big.mark = ","), "M"),
  caption = paste0(format(top_products$shipments[3], big.mark = ","), "shipments")
)
```


```{r}
#| content: valuebox
#| title: !expr top_products$product_group[4]
#| color: info

list(
  value = paste0("$", format(round(top_products$total_value[4] / 1e6, 1), big.mark = ","), "M"),
  caption = paste0(format(top_products$shipments[4], big.mark = ","), "shipments")
)
```


```{r}
#| content: valuebox
#| title: !expr top_products$product_group[5]
#| color: info

list(
  value = paste0("$", format(round(top_products$total_value[5] / 1e6, 1), big.mark = ","), "M"),
  caption = paste0(format(top_products$shipments[5], big.mark = ","), "shipments")
)
```


## Row {height="80%"}
### Column {width="50%"}

```{r}
#| title: "Product Portfolio: Value vs Volume"

top_products <- product_metrics %>%
  slice_max(total_value, n = 30)

top_products %>%
  ggplot(aes(x = total_volume, y = total_value)) +
  geom_point(aes(size = shipments, color = brand_type), alpha = 0.6) +
  geom_text_repel(
    data = top_products %>% slice_max(total_value, n = 8),
    aes(label = str_wrap(molecule_test_type, 20)),
    size = 2.5,
    max.overlaps = 10
  ) +
  scale_x_log10(labels = comma_format()) +
  scale_y_log10(labels = dollar_format()) +
  scale_size_continuous(name = "Shipments", range = c(2, 15)) +
  scale_color_manual(
    values = c("Generic" = "#3498db", "Branded" = "#e74c3c"),
    name = "Type"
  ) +
  labs(
    title = NULL,
    x = "Total Volume (log scale)",
    y = "Total Value (log scale)"
  ) +
  theme_minimal() +
  theme(legend.position = "right")
```


### Column {width="50%"}
```{r}
#| title: "Generic Savings Opportunities"

price_comparison <- price_summary %>%
  select(molecule_label, brand_simple, median_price, savings_pct) %>%
  pivot_wider(names_from = brand_simple, values_from = median_price) %>%
  arrange(desc(savings_pct)) %>%
  head(12)

price_comparison %>%
  ggplot(aes(y = reorder(molecule_label, savings_pct))) +
  geom_segment(
    aes(x = Generic, xend = Branded, yend = molecule_label),
    color = "grey70", linewidth = 1.5
  ) +
  geom_point(aes(x = Generic), color = "#27ae60", size = 5, alpha = 0.8) +
  geom_point(aes(x = Branded), color = "#e74c3c", size = 5, alpha = 0.8) +
  geom_text(
    aes(x = Branded, label = paste0(round(savings_pct, 0), "%")),
    hjust = -0.3, size = 3, fontface = "bold", color = "#27ae60"
  ) +
  scale_x_log10(
    labels = dollar_format(),
    breaks = c(0.1, 1, 10, 100, 1000),
    expand = expansion(mult = c(0.05, 0.2))
  ) +
  labs(
    title = NULL,
    x = "Unit Price (USD, log scale)",
    y = NULL
  ) +
  theme_minimal(base_size = 11) +
  theme(
    axis.text.y = element_text(size = 9, face = "bold"),
    panel.grid.major.y = element_blank()
  )
```



# About & Reference {orientation="columns"}

## Column {width="40%"}

### Executive Summary

::: {.card}
::: {.card-header}
**Dashboard Overview**
:::
::: {.card-body}
This supply chain performance dashboard analyzes USAID's Antiretroviral (ARV) and HIV Lab shipment data from 2006 to 2015. The dashboard provides comprehensive insights into:

- **Geographic Distribution**: Interactive mapping of shipment values and volumes across recipient countries
- **Vendor Performance**: Scoring system evaluating suppliers based on delivery reliability (40%), volume (30%), and pricing competitiveness (30%)
- **Product Portfolio Analysis**: Detailed breakdown of product categories, pricing comparisons between generic and branded medications
- **Supply Chain Efficiency**: On-time delivery metrics and delay analysis across the network

The data represents over 10,000 shipments with a combined value exceeding hundreds of millions of dollars, supporting USAID's mission to achieve the 90-90-90 global HIV/AIDS treatment goals.

**Key Findings:**

- Overall on-time delivery rate of approximately 96%
- Significant cost savings (often 50-80%) available through generic substitution
- ARV medications represent the largest product category by value
- Strong vendor performance correlates with higher shipment volumes and better pricing
:::
:::

### Data Source

::: {.card}
::: {.card-header}
**Dataset Information**
:::
::: {.card-body}
**Title:** Supply Chain Shipment Pricing Data

**Source:** [Kaggle Dataset](https://www.kaggle.com/datasets/divyeshardeshana/supply-chain-shipment-pricing-data)

**Time Period:** 2006 - 2015

**Records:** 10,307 shipment transactions

**Key Variables:**

* Shipment identifiers and tracking numbers
* Product details (molecule type, brand, dosage)
* Vendor information
* Delivery dates and performance metrics
* Pricing and cost data
* Geographic distribution (43 countries)

**Data Processing:**

* Cleaned and standardized country names
* Calculated delivery delays and on-time metrics
* Aggregated vendor performance scores
* Normalized pricing for comparison
:::
:::

## Column {width="60%"}

### Abbreviation Reference Guide
```{r}
#| title: "Product Categories & Terms"

# Create abbreviation reference table
abbreviations <- data.frame(
  Abbreviation = c(
    "ARV",
    "HRDT", 
    "ACT",
    "ANTM",
    "MRDT",
    "SCMS",
    "PEPFAR",
    "PQ",
    "PO/SO",
    "ASN/DN",
    "PMO",
    "EXW",
    "FCA",
    "DDU",
    "CIP"
  ),
  Full_Name = c(
    "Anti-Retroviral Treatment",
    "HIV Rapid Diagnostic Test",
    "Artemisinin-based Combination Therapy",
    "Anti-malarial Medicine",
    "Malarial Rapid Diagnostic Test",
    "Supply Chain Management System",
    "President's Emergency Plan for AIDS Relief",
    "Pre-Qualification",
    "Purchase Order/Sales Order",
    "Advanced Shipping Notice/Delivery Note",
    "Project Management Office",
    "Ex Works (Incoterm)",
    "Free Carrier (Incoterm)",
    "Delivered Duty Unpaid (Incoterm)",
    "Carriage and Insurance Paid (Incoterm)"
  ),
  Category = c(
    "Product",
    "Product",
    "Product",
    "Product",
    "Product",
    "Organization",
    "Program",
    "Process",
    "Document",
    "Document",
    "Organization",
    "Shipping Term",
    "Shipping Term",
    "Shipping Term",
    "Shipping Term"
  ),
  Description = c(
    "Medications that treat HIV by stopping virus replication",
    "Point-of-care testing device for HIV antibody detection",
    "First-line malaria treatment combining multiple drugs",
    "Broader category of malaria treatment medications",
    "Point-of-care testing device for malaria parasite detection",
    "Primary procurement agent established in 2005 for PEPFAR",
    "US global HIV/AIDS initiative launched in 2003",
    "WHO/regulatory approval process for medicines",
    "Official order documents in procurement process",
    "Shipping notification and delivery confirmation documents",
    "US-based project management organization",
    "Seller responsible until goods leave premises",
    "Seller delivers to carrier nominated by buyer",
    "Seller pays transport but not import duties",
    "Seller pays transport and insurance to destination"
  )
)

# Display as formatted table
abbreviations %>%
  gt() %>%
  tab_row_group(
    label = "Shipping Terms",
    rows = Category == "Shipping Term"
  ) %>%
  tab_row_group(
    label = "Documents & Processes",
    rows = Category %in% c("Document", "Process")
  ) %>%
  tab_row_group(
    label = "Organizations & Programs",
    rows = Category %in% c("Organization", "Program")
  ) %>%
  tab_row_group(
    label = "Product Categories",
    rows = Category == "Product"
  ) %>%
  cols_hide(Category) %>%
  tab_style(
    style = cell_text(weight = "bold", size = px(11)),
    locations = cells_row_groups()
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = Abbreviation)
  ) %>%
  cols_label(
    Abbreviation = "Term",
    Full_Name = "Full Name",
    Description = "Description"
  ) %>%
  cols_width(
    Abbreviation ~ px(80),
    Full_Name ~ px(250),
    Description ~ px(350)
  ) %>%
  tab_options(
    table.font.size = px(11),
    row_group.font.size = px(12),
    data_row.padding = px(5)
  )

```


### Methodology Notes

::: {.card}
::: {.card-header}
Performance Scoring Methodology
:::
::: {.card-body}

**Vendor Score Calculation:**

The overall vendor performance score (0-100 scale) is calculated using three weighted components:

**Delivery Performance (40% weight)**

* Based on average delay days
* Negative delays (early delivery) improve score
* Normalized to 0-100 scale


**Volume Score (30% weight)**

* Based on total shipment value
* Higher volumes indicate reliability
* Log-scaled to account for magnitude differences


**Price Competitiveness (30% weight)**

* Based on average unit prices
* Lower prices score higher
* Adjusted by product category



**Data Quality Notes:**

Missing PO dates imputed using median lead times
Insurance costs estimated where missing
Countries standardized using ISO naming conventions
:::
:::


